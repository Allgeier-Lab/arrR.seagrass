// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#ifndef RCPP_arrR_seagrass_RCPPEXPORTS_H_GEN_
#define RCPP_arrR_seagrass_RCPPEXPORTS_H_GEN_

#include <Rcpp.h>

namespace arrR_seagrass {

    using namespace Rcpp;

    namespace {
        void validateSignature(const char* sig) {
            Rcpp::Function require = Rcpp::Environment::base_env()["require"];
            require("arrR.seagrass", Rcpp::Named("quietly") = true);
            typedef int(*Ptr_validate)(const char*);
            static Ptr_validate p_validate = (Ptr_validate)
                R_GetCCallable("arrR.seagrass", "_arrR_seagrass_RcppExport_validate");
            if (!p_validate(sig)) {
                throw Rcpp::function_not_exported(
                    "C++ function with signature '" + std::string(sig) + "' not found in arrR.seagrass");
            }
        }
    }

    inline double rcpp_allocation_ratio(double biomass, double biomass_min, double biomass_max, double threshold, double slope) {
        typedef SEXP(*Ptr_rcpp_allocation_ratio)(SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_rcpp_allocation_ratio p_rcpp_allocation_ratio = NULL;
        if (p_rcpp_allocation_ratio == NULL) {
            validateSignature("double(*rcpp_allocation_ratio)(double,double,double,double,double)");
            p_rcpp_allocation_ratio = (Ptr_rcpp_allocation_ratio)R_GetCCallable("arrR.seagrass", "_arrR_seagrass_rcpp_allocation_ratio");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_rcpp_allocation_ratio(Shield<SEXP>(Rcpp::wrap(biomass)), Shield<SEXP>(Rcpp::wrap(biomass_min)), Shield<SEXP>(Rcpp::wrap(biomass_max)), Shield<SEXP>(Rcpp::wrap(threshold)), Shield<SEXP>(Rcpp::wrap(slope)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<double >(rcpp_result_gen);
    }

    inline double rcpp_convert_nutr(double x, std::string to) {
        typedef SEXP(*Ptr_rcpp_convert_nutr)(SEXP,SEXP);
        static Ptr_rcpp_convert_nutr p_rcpp_convert_nutr = NULL;
        if (p_rcpp_convert_nutr == NULL) {
            validateSignature("double(*rcpp_convert_nutr)(double,std::string)");
            p_rcpp_convert_nutr = (Ptr_rcpp_convert_nutr)R_GetCCallable("arrR.seagrass", "_arrR_seagrass_rcpp_convert_nutr");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_rcpp_convert_nutr(Shield<SEXP>(Rcpp::wrap(x)), Shield<SEXP>(Rcpp::wrap(to)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<double >(rcpp_result_gen);
    }

    inline void rcpp_diffuse_values(Rcpp::NumericMatrix seafloor, Rcpp::IntegerMatrix cell_adj, double nutrients_diffusion, double detritus_diffusion, double detritus_fish_diffusion) {
        typedef SEXP(*Ptr_rcpp_diffuse_values)(SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_rcpp_diffuse_values p_rcpp_diffuse_values = NULL;
        if (p_rcpp_diffuse_values == NULL) {
            validateSignature("void(*rcpp_diffuse_values)(Rcpp::NumericMatrix,Rcpp::IntegerMatrix,double,double,double)");
            p_rcpp_diffuse_values = (Ptr_rcpp_diffuse_values)R_GetCCallable("arrR.seagrass", "_arrR_seagrass_rcpp_diffuse_values");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_rcpp_diffuse_values(Shield<SEXP>(Rcpp::wrap(seafloor)), Shield<SEXP>(Rcpp::wrap(cell_adj)), Shield<SEXP>(Rcpp::wrap(nutrients_diffusion)), Shield<SEXP>(Rcpp::wrap(detritus_diffusion)), Shield<SEXP>(Rcpp::wrap(detritus_fish_diffusion)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
    }

    inline void rcpp_mineralization(Rcpp::NumericMatrix seafloor, double detritus_mineralization, double detritus_fish_decomp) {
        typedef SEXP(*Ptr_rcpp_mineralization)(SEXP,SEXP,SEXP);
        static Ptr_rcpp_mineralization p_rcpp_mineralization = NULL;
        if (p_rcpp_mineralization == NULL) {
            validateSignature("void(*rcpp_mineralization)(Rcpp::NumericMatrix,double,double)");
            p_rcpp_mineralization = (Ptr_rcpp_mineralization)R_GetCCallable("arrR.seagrass", "_arrR_seagrass_rcpp_mineralization");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_rcpp_mineralization(Shield<SEXP>(Rcpp::wrap(seafloor)), Shield<SEXP>(Rcpp::wrap(detritus_mineralization)), Shield<SEXP>(Rcpp::wrap(detritus_fish_decomp)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
    }

    inline void rcpp_nutr_input(Rcpp::NumericMatrix seafloor, double nutrients_input) {
        typedef SEXP(*Ptr_rcpp_nutr_input)(SEXP,SEXP);
        static Ptr_rcpp_nutr_input p_rcpp_nutr_input = NULL;
        if (p_rcpp_nutr_input == NULL) {
            validateSignature("void(*rcpp_nutr_input)(Rcpp::NumericMatrix,double)");
            p_rcpp_nutr_input = (Ptr_rcpp_nutr_input)R_GetCCallable("arrR.seagrass", "_arrR_seagrass_rcpp_nutr_input");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_rcpp_nutr_input(Shield<SEXP>(Rcpp::wrap(seafloor)), Shield<SEXP>(Rcpp::wrap(nutrients_input)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
    }

    inline void rcpp_nutr_output(Rcpp::NumericMatrix seafloor, double nutrients_loss, double detritus_loss) {
        typedef SEXP(*Ptr_rcpp_nutr_output)(SEXP,SEXP,SEXP);
        static Ptr_rcpp_nutr_output p_rcpp_nutr_output = NULL;
        if (p_rcpp_nutr_output == NULL) {
            validateSignature("void(*rcpp_nutr_output)(Rcpp::NumericMatrix,double,double)");
            p_rcpp_nutr_output = (Ptr_rcpp_nutr_output)R_GetCCallable("arrR.seagrass", "_arrR_seagrass_rcpp_nutr_output");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_rcpp_nutr_output(Shield<SEXP>(Rcpp::wrap(seafloor)), Shield<SEXP>(Rcpp::wrap(nutrients_loss)), Shield<SEXP>(Rcpp::wrap(detritus_loss)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
    }

    inline double rcpp_nutr_uptake(double nutrients, double biomass, double v_max, double k_m, double time_frac) {
        typedef SEXP(*Ptr_rcpp_nutr_uptake)(SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_rcpp_nutr_uptake p_rcpp_nutr_uptake = NULL;
        if (p_rcpp_nutr_uptake == NULL) {
            validateSignature("double(*rcpp_nutr_uptake)(double,double,double,double,double)");
            p_rcpp_nutr_uptake = (Ptr_rcpp_nutr_uptake)R_GetCCallable("arrR.seagrass", "_arrR_seagrass_rcpp_nutr_uptake");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_rcpp_nutr_uptake(Shield<SEXP>(Rcpp::wrap(nutrients)), Shield<SEXP>(Rcpp::wrap(biomass)), Shield<SEXP>(Rcpp::wrap(v_max)), Shield<SEXP>(Rcpp::wrap(k_m)), Shield<SEXP>(Rcpp::wrap(time_frac)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<double >(rcpp_result_gen);
    }

    inline void rcpp_seagrass_growth(Rcpp::NumericMatrix seafloor, double bg_v_max, double bg_k_m, double bg_gamma, double ag_v_max, double ag_k_m, double ag_gamma, double bg_biomass_max, double bg_biomass_min, double ag_biomass_max, double ag_biomass_min, double seagrass_thres, double seagrass_slope, double seagrass_slough, double time_frac) {
        typedef SEXP(*Ptr_rcpp_seagrass_growth)(SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_rcpp_seagrass_growth p_rcpp_seagrass_growth = NULL;
        if (p_rcpp_seagrass_growth == NULL) {
            validateSignature("void(*rcpp_seagrass_growth)(Rcpp::NumericMatrix,double,double,double,double,double,double,double,double,double,double,double,double,double,double)");
            p_rcpp_seagrass_growth = (Ptr_rcpp_seagrass_growth)R_GetCCallable("arrR.seagrass", "_arrR_seagrass_rcpp_seagrass_growth");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_rcpp_seagrass_growth(Shield<SEXP>(Rcpp::wrap(seafloor)), Shield<SEXP>(Rcpp::wrap(bg_v_max)), Shield<SEXP>(Rcpp::wrap(bg_k_m)), Shield<SEXP>(Rcpp::wrap(bg_gamma)), Shield<SEXP>(Rcpp::wrap(ag_v_max)), Shield<SEXP>(Rcpp::wrap(ag_k_m)), Shield<SEXP>(Rcpp::wrap(ag_gamma)), Shield<SEXP>(Rcpp::wrap(bg_biomass_max)), Shield<SEXP>(Rcpp::wrap(bg_biomass_min)), Shield<SEXP>(Rcpp::wrap(ag_biomass_max)), Shield<SEXP>(Rcpp::wrap(ag_biomass_min)), Shield<SEXP>(Rcpp::wrap(seagrass_thres)), Shield<SEXP>(Rcpp::wrap(seagrass_slope)), Shield<SEXP>(Rcpp::wrap(seagrass_slough)), Shield<SEXP>(Rcpp::wrap(time_frac)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
    }

}

#endif // RCPP_arrR_seagrass_RCPPEXPORTS_H_GEN_
